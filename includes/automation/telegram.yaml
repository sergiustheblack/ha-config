  - alias: 'Ping'
    trigger:
      platform: event
      event_type: telegram_command
      event_data:
        command: '/ping'
    action:
      - service: telegram_bot.send_message
        data:
          callback_query_id: '{{ trigger.event.data.id }}'
          target: '{{ trigger.event.data.chat_id }}'
          message: 'Мьяу!'
    
# light control
  - alias: 'Turn off light callback'
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          command: '/lightoff'
    condition:
      condition: template
      value_template: '{{ trigger.event.data["args"] | length > 0 }}'
    action:
      - service: light.turn_off
        data_template:
          entity_id: '{{ "light." ~ trigger.event.data["args"] | first | string }}'
      - delay:
          seconds: '0.5'
      - service: telegram_bot.answer_callback_query
        data:
          target: '{{ trigger.event.data.chat_id }}'
          callback_query_id: '{{ trigger.event.data.id }}'
          message: &light_msg |
            {%- set sw = states["light." ~ trigger.event.data["args"] | first] %}
            {{ sw.attributes.friendly_name }}: {{ sw.state | upper }}
      - service: telegram_bot.edit_message
        data: &msg_after_action
          inline_message_id: '{{ trigger.event.data.message.message_id }}'
          message_id: '{{ trigger.event.data.message.message_id }}'
          callback_query_id: '{{ trigger.event.data.id }}'
          chat_id: '{{ trigger.event.data.chat_id }}'
          message: |
            {%- set selected_room = (trigger.event.data["args"] | first).split('_') | first %}
            {%- set known_types = ["power", "temperature", "consumption"] %}
            {%- set sensor_type_map = [
              {"power": "\U000026A1"},
              {"battery": "\U0001F50B"},
              {"temperature": "\U0001F321"},
              {"consumption": "\U000026A1\U000023F3"}
            ]
            %}
            {%- macro type_to_emoji(type) %}
            {{ (sensor_type_map | map(attribute=type) | select('string') | list)[0] }}
            {%- endmacro %}
            
            {%- for entity in states.sensor %}
            {%- set room = entity.entity_id.split(".")[1].split("_")[0] %}
            {%- set dom = entity.entity_id.split(".")[1].split("_")[1] %}
            {%- set type = entity.entity_id.split(".")[1].split("_")[-1] %}
            {%- set device = entity.entity_id.split(".")[1].split("_")[0:2] | join("_") %}
            {%- if room == selected_room %}
            {%- if type in known_types -%}
            {{ type_to_emoji(type) }}{{ entity.attributes.get('friendly_name') | replace("_","\_")}}: {{ entity.state }} {{ entity.attributes.get("unit_of_measurement") }}
            {%- endif %}
            {%- endif %}
            {%- endfor %}
            
            {# Выключатели #}
            {%- set light_map = [
                {"on": "\U0001F4A1"},
                {"off": "\U000026AA"},
              ]
            %}
            {%- set switch_map = [
              {"on": "\U00002705	"},
              {"off": "\U000026AA"},
            ]
            %}
              
              {%- macro light_status(type) -%}
              {{ (light_map | map(attribute=type) | select('string') | list)[0] }}
              {%- endmacro %}
              {%- macro switch_status(type) -%}
              {{ (switch_map | map(attribute=type) | select('string') | list)[0] }}
              {%- endmacro %}
              
            {%- set nm = namespace(str="") %}
            {%- for entity in states.switch | list + states.light | list %}
            {%- set room = entity.entity_id.split(".")[1].split("_")[0] %}
            {%- set dom = entity.entity_id.split(".")[1].split("_")[1] %}
            {%- set type = entity.entity_id.split(".")[1].split("_")[-1] %}
            {%- set device = entity.entity_id.split(".")[1] %}
            {%- if room == selected_room -%}
              {%- if entity.domain == "light" -%}
                {{ entity.attributes.get("friendly_name") | replace("_","\_") ~ light_status(entity.state) }}
              {%- else %}
                {%- if entity.domain != "light" and dom != "light" %}
                  {{ entity.attributes.get('friendly_name') | replace("_","\_") ~ switch_status(entity.state) }}
                {%- endif %}
              {%- endif %}
            {%- endif %}
            {%- endfor %}
      - service: telegram_bot.edit_replymarkup
        data: &markup_after_action
          inline_message_id: '{{ trigger.event.data.message.message_id }}'
          message_id: '{{ trigger.event.data.message.message_id }}'
          callback_query_id: '{{ trigger.event.data.id }}'
          chat_id: '{{ trigger.event.data.chat_id }}'
          inline_keyboard: 
            - |
              {%- set selected_room = (trigger.event.data["args"] | first).split('_') | first %}
              {%- set nm = namespace(str="") %}
              {%- for entity in states.switch | list + states.light | list %}
              {%- set room = entity.entity_id.split(".")[1].split("_")[0] %}
              {%- set dom = entity.entity_id.split(".")[1].split("_")[1] %}
              {%- set type = entity.entity_id.split(".")[1].split("_")[-1] %}
              {%- set device = entity.entity_id.split(".")[1] %}
              {%- if room == selected_room -%}
              {%- if entity.domain == 'switch' and dom != 'light' -%}
              {%- set nm.str = nm.str ~ "," ~  entity.attributes.get('friendly_name') | replace("_","\_") ~ ":/switchtoggle " ~ device ~ " " ~ room %}
              {%- elif entity.domain == 'light' -%}
              {%- set nm.str = nm.str ~ "," ~  entity.attributes.get('friendly_name') | replace("_","\_") ~ ":/lighttoggle " ~ device ~ " " ~ room %}
              {%- endif %}
              {%- endif %}
              {%- endfor %}
              {{ nm.str.split(",")[1:] | join(", ")}}
            - "Назад:/start"
        
  - alias: 'Turn on light call'
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          command: '/lighton'
    condition:
      condition: template
      value_template: '{{ trigger.event.data["args"] | length > 0 }}'
    action:
      - service: light.turn_on
        data_template:
          entity_id: '{{ "light." ~ trigger.event.data["args"] | first | string }}'
      - delay:
          seconds: '0.5'
      - service: telegram_bot.answer_callback_query
        data:
          target: '{{ trigger.event.data.chat_id }}'
          callback_query_id: '{{ trigger.event.data.id }}'
          message: *light_msg

            
  - alias: 'TG Toggle light call'
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          command: '/lighttoggle'
    condition:
      condition: template
      value_template: '{{ trigger.event.data["args"] | length > 0 }}'
    action:
      - service: light.toggle
        data_template:
          entity_id: '{{ "light." ~ trigger.event.data["args"] | first | string }}'
      - service: telegram_bot.answer_callback_query
        data:
          target: '{{ trigger.event.data.chat_id }}'
          callback_query_id: '{{ trigger.event.data.id }}'
          message: ' msg {{ trigger.event.data["args"] | first | string }}'
  #    - wait:
  #        wait_template: '{{ states["light." ~ (trigger.event.data["args"] | first | string)].last_changed < utcnow() }}'
      - service: telegram_bot.answer_callback_query
        data:
          target: '{{ trigger.event.data.chat_id }}'
          callback_query_id: '{{ trigger.event.data.id }}'
          message: *light_msg
      - service: telegram_bot.edit_message
        data: *msg_after_action
      - service: telegram_bot.edit_replymarkup
        data: *markup_after_action
            
  - alias: 'Turn off light'
    trigger:
      - platform: event
        event_type: telegram_command
        event_data:
          command: '/lightoff'
    condition:
      condition: template
      value_template: '{{ trigger.event.data["args"] | length > 0 }}'
    action:
      - service: light.turn_off
        data_template:
          entity_id: '{{ "light." ~ trigger.event.data["args"] | first | string }}'
      - delay:
          seconds: '0.5'
      - service: telegram_bot.send_message
        data:
          target: '{{ trigger.event.data.chat_id }}'
          message: *light_msg
        
  - alias: 'Turn on light'
    trigger:
      - platform: event
        event_type: telegram_command
        event_data:
          command: '/lighton'
    condition:
      condition: template
      value_template: '{{ trigger.event.data["args"] | length > 0 }}'
    action:
      - service: light.turn_on
        data_template:
          entity_id: '{{ "light." ~ trigger.event.data["args"] | first | string }}'
      - delay:
          seconds: '0.5'
      - service: telegram_bot.send_message
        data:
          target: '{{ trigger.event.data.chat_id }}'
          message: *light_msg
            
  - alias: 'TG Toggle light'
    trigger:
      - platform: event
        event_type: telegram_command
        event_data:
          command: '/lighttoggle'
    condition:
      condition: template
      value_template: '{{ trigger.event.data["args"] | length > 0 }}'
    action:
      - service: light.toggle
        data_template:
          entity_id: '{{ "light." ~ trigger.event.data["args"] | first | string }}'
      - delay:
          seconds: '0.5'
      - service: telegram_bot.send_message
        data:
          target: '{{ trigger.event.data.chat_id }}'
          message: *light_msg
            
# Switch control
  - alias: 'Turn off switch call'
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          command: '/switchoff'
    condition:
      condition: template
      value_template: '{{ trigger.event.data["args"] | length > 0 }}'
    action:
      - service: switch.turn_off
        data_template:
          entity_id: '{{ "switch." ~ trigger.event.data["args"] | first | string }}'
      - delay:
          seconds: '0.5'
      - service: telegram_bot.answer_callback_query
        data:
          target: '{{ trigger.event.data.chat_id }}'
          callback_query_id: '{{ trigger.event.data.id }}'
          message: &switch_msg |
            {%- set sw = states["switch." ~ trigger.event.data["args"] | first] %}
            {{ sw.attributes.friendly_name }}: {{ sw.state | upper }}
        
  - alias: 'Turn on switch call'
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          command: '/switchon'
    condition:
      condition: template
      value_template: '{{ trigger.event.data["args"] | length > 0 }}'
    action:
      - service: switch.turn_on
        data_template:
          entity_id: '{{ "switch." ~ trigger.event.data["args"] | first | string }}'
      - delay:
          seconds: '0.5'
      - service: telegram_bot.answer_callback_query
        data:
          target: '{{ trigger.event.data.chat_id }}'
          callback_query_id: '{{ trigger.event.data.id }}'
          message: *switch_msg
            
  - alias: 'TG Toggle switch call'
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          command: '/switchtoggle'
    condition:
      condition: template
      value_template: '{{ trigger.event.data["args"] | length > 0 }}'
    action:
      - service: switch.toggle
        data_template:
          entity_id: '{{ "switch." ~ trigger.event.data["args"] | first | string }}'
      - delay:
          seconds: '0.5'
      - service: telegram_bot.answer_callback_query
        data:
          target: '{{ trigger.event.data.chat_id }}'
          callback_query_id: '{{ trigger.event.data.id }}'
          message: *switch_msg
          
  - alias: 'Turn off switch'
    trigger:
      - platform: event
        event_type: telegram_command
        event_data:
          command: '/switchoff'
    condition:
      condition: template
      value_template: '{{ trigger.event.data["args"] | length > 0 }}'
    action:
      - service: switch.turn_off
        data_template:
          entity_id: '{{ "switch." ~ trigger.event.data["args"] | first | string }}'
      - delay:
          seconds: '0.5'
      - service: telegram_bot.send_message
        data:
          target: '{{ trigger.event.data.chat_id }}'
          message: *switch_msg
        
  - alias: 'Turn on switch'
    trigger:
      - platform: event
        event_type: telegram_command
        event_data:
          command: '/switchon'
    condition:
      condition: template
      value_template: '{{ trigger.event.data["args"] | length > 0 }}'
    action:
      - service: switch.turn_on
        data_template:
          entity_id: '{{ "switch." ~ trigger.event.data["args"] | first | string }}'
      - delay:
          seconds: '0.5'
      - service: telegram_bot.send_message
        data:
          target: '{{ trigger.event.data.chat_id }}'
          message: *switch_msg
            
  - alias: 'TG Toggle switch'
    trigger:
      - platform: event
        event_type: telegram_command
        event_data:
          command: '/switchtoggle'
    condition:
      condition: template
      value_template: '{{ trigger.event.data["args"] | length > 0 }}'
    action:
      - service: switch.toggle
        data_template:
          entity_id: '{{ "switch." ~ trigger.event.data["args"] | first | string }}'
      - delay:
          seconds: '0.5'
      - service: telegram_bot.send_message
        data:
          target: '{{ trigger.event.data.chat_id }}'
          message: *switch_msg
          
# Info callback          
  - alias: 'Get item status'
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          command: '/itemstatus'
      - platform: event
        event_type: telegram_command
        event_data:
          command: '/itemstatus'
    condition:
      condition: template
      value_template: '{{ trigger.event.data["args"] | length > 0 }}'
    action:
      - service: telegram_bot.send_message
        data:
          target: '{{ trigger.event.data.chat_id }}'
          message: |
            {%- set item = states[trigger.event.data["args"] | first] %}
            *{{ item.attributes.friendly_name | replace('_','\_') }}*
            
            {%- for state_key in item["attributes"] %}
            {{ state_key | replace('_','\_') }} = {{ item.attributes[state_key] | replace('_','\_') }}
            {%- endfor %}
            
# Send simple message
  - alias: 'Send message'
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          command: '/message'
      - platform: event
        event_type: telegram_command
        event_data:
          command: '/message'
    condition:
      condition: template
      value_template: '{{ trigger.event.data["args"] | length > 0 }}'
    action:
      - service: telegram_bot.send_message
        data:
          target: '{{ trigger.event.data.chat_id }}'
          message: '{{ trigger.event.data["args"] | join(" ") }}'
          
          
# Weather
  - alias: 'Weather report'
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          command: '/weather'
      - platform: event
        event_type: telegram_command
        event_data:
          command: '/weather'
    action:
      - service: telegram_bot.send_message
        data:
          target: '{{ trigger.event.data.chat_id }}'
          message: |
            {%- set ru_daytime = 
              [
                {"night": "ночью"}, 
                {"morning": "утром"},
                {"day": "днём"},
                {"evening": "вечером"}
              ] 
            %}
            
            {%- set emojiweather = 
              [
                {"Ясно": "\U00002600"},
                {"Малооблачно": "\U0001F324"},
                {"Облачно с прояснениями": "\U0001F325"},
                {"Пасмурно": "\U00002601"},
                {"Морось": "\U0001F326"},
                {"Небольшой дождь": "\U0001F326"},
                {"Дождь": "\U0001F327"},
                {"Умеренно сильный дождь": "\U0001F327"},
                {"Сильный дождь": "\U0001F327\U0001F327"},
                {"Длительный cильный дождь": "\U000026C8"},
                {"Ливень": "\U000026C8"},
                {"Град": "\U000026C8"},
                {"Дождь со снегом": "\U0001F327\U0001F328"},
                {"Небольшой снег": "\U0001F328"},
                {"Снег": "\U0001F328"},
                {"Снегопад": "\U0001F328\U0001F328"},
                {"Небольшой снег": "\U0001F328"},
                {"Гроза": "\U0001F329"},
                {"Дождь с грозой": "\U0001F329"},
                {"Гроза с градом": "\U0001F329"},
              ] 
            %}
            
            {%- macro to_ru_daytime(daytime) -%}
            {{ (ru_daytime | map(attribute=daytime) | select('string') | list)[0] }}
            {%- endmacro %}
            
            {%- macro to_emoji(weather) -%}
            {{ (emojiweather | map(attribute=weather) | select('string') | list)[0] }}
            {%- endmacro %}
            
            {%- set sensor = states.weather.yandex_weather.attributes %}
            {%- set forecast = sensor.forecast %}
            Прогноз собран *{{ ((as_timestamp(now()) - as_timestamp(sensor.observation_time)) / 3600)  | round(0,'ceiling') }} часов назад.*
            {{ to_emoji(sensor["weather_condition"]) }}На улице {{ sensor["weather_condition"] | lower }}.
            Температура воздуха {{ sensor["temperature"] }}˚C, ощущается как {{ sensor["feels_like"] }}˚C.
            *Прогноз:*
            {%- for f in forecast %}
            
            {{ f.datetime.strftime('%A %B %d') }} {{ to_ru_daytime(f.part_of_day) }}:
            {{ to_emoji(f["weather_condition"]) }}{{ f["weather_condition"]}}.
            Температура воздуха {{ f.temperature }}˚C, ощущается как {{ f.feels_like }},
            Минимум {{ f.templow }}˚C.
            Осадки (мм): {{ f.precipitation }}
            Вероятность выпадения осадков: {{ f.precipitation_probability }}
            {%- endfor %}

# main menu
  - alias: 'TG Start'
    trigger:
      - platform: event
        event_type: telegram_command
        event_data:
          command: '/start'
    action:
      - service: telegram_bot.send_message
        data:
          target: '{{ trigger.event.data.chat_id }}'
          callback_query_id: '{{ trigger.event.data.id }}'
          message: 'Мьяу!'
          inline_keyboard: &tg_start
            - |
              {%- set emoji_room = 
                {
                  "bedroom": "\U0001F6CF", 
                  "bathroom": "\U0001F6C1",
                  "cloakroom": "\U0001F9F3",
                  "kitchen": "\U0001F37D",
                  "hall": "\U0001F6AA",
                  "balcony": "\U0001F3AC"
                }
              %}
              
              {%- macro to_emoji_room(room) -%}
              {{ emoji_room.get(room, "default") }}
              {%- endmacro %}
              
              {%- set nm = namespace(str = '') %}
              {%- for entity in states.switch %}
              {%- set name = entity.entity_id.split(".")[1].split("_")[0] %}
              {%- if name in emoji_room %}
              {%- set nm.str = nm.str ~ ',' ~ to_emoji_room(name) ~ ":/room " ~ name %}
              {%- endif %}
              {%- endfor %}
              {%- for entity in states.light %}
              {%- set name = entity.entity_id.split(".")[1].split("_")[0] %}
              {%- if name in emoji_room %}
              {%- set nm.str = nm.str ~ ',' ~ to_emoji_room(name) ~ ":/room " ~ name %}
              {%- endif %}
              {%- endfor %}
              {%- set nm.lst = nm.str.split(',')[1:] | unique | list  %}
              {{ nm.lst | join(", ") }}
            - "Погода:/weather"
            - "Скорость интернета:/speedtest"
            - "Пылесос:/vacuum"
            
  - alias: 'TG Start Callback'
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: '/start'
    action:
      - service: telegram_bot.edit_message
        data:
          inline_message_id: '{{ trigger.event.data.message.message_id }}'
          message_id: '{{ trigger.event.data.message.message_id }}'
          callback_query_id: '{{ trigger.event.data.id }}'
          chat_id: '{{ trigger.event.data.chat_id }}'
          message: 'Мьяу!'
          inline_keyboard: *tg_start
            
  - alias: 'TG Expand room'
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          command: '/room'
      - platform: event
        event_type: telegram_command
        event_data:
          command: '/room'
    condition:
      condition: template
      value_template: '{{ trigger.event.data["args"] | length > 0 }}'
    action:
      - service: telegram_bot.edit_message
        data:
          inline_message_id: '{{ trigger.event.data.message.message_id }}'
          message_id: '{{ trigger.event.data.message.message_id }}'
          callback_query_id: '{{ trigger.event.data.id }}'
          chat_id: '{{ trigger.event.data.chat_id }}'
          message: |
            {%- set selected_room = trigger.event.data["args"] | first %}
            {%- set known_types = ["power", "temperature", "consumption"] %}
            {%- set sensor_type_map = [
              {"power": "\U000026A1"},
              {"battery": "\U0001F50B"},
              {"temperature": "\U0001F321"},
              {"consumption": "\U000026A1\U000023F3"}
            ]
            %}
            {%- macro type_to_emoji(type) %}
            {{ (sensor_type_map | map(attribute=type) | select('string') | list)[0] }}
            {%- endmacro %}
            
            {%- for entity in states.sensor %}
            {%- set room = entity.entity_id.split(".")[1].split("_")[0] %}
            {%- set dom = entity.entity_id.split(".")[1].split("_")[1] %}
            {%- set type = entity.entity_id.split(".")[1].split("_")[-1] %}
            {%- set device = entity.entity_id.split(".")[1].split("_")[0:2] | join("_") %}
            {%- if room == selected_room %}
            {%- if type in known_types -%}
            {{ type_to_emoji(type) }}{{ entity.attributes.get('friendly_name') | replace("_","\_")}}: {{ entity.state }} {{ entity.attributes.get("unit_of_measurement") }}
            {%- endif %}
            {%- endif %}
            {%- endfor %}
            
            {# Выключатели #}
            {%- set light_map = [
                {"on": "\U0001F4A1"},
                {"off": "\U000026AA"},
              ]
            %}
            {%- set switch_map = [
              {"on": "\U00002705	"},
              {"off": "\U000026AA"},
            ]
            %}
              
              {%- macro light_status(type) -%}
              {{ (light_map | map(attribute=type) | select('string') | list)[0] }}
              {%- endmacro %}
              {%- macro switch_status(type) -%}
              {{ (switch_map | map(attribute=type) | select('string') | list)[0] }}
              {%- endmacro %}
              
            {%- set nm = namespace(str="") %}
            {%- for entity in states.switch | list + states.light | list %}
            {%- set room = entity.entity_id.split(".")[1].split("_")[0] %}
            {%- set dom = entity.entity_id.split(".")[1].split("_")[1] %}
            {%- set type = entity.entity_id.split(".")[1].split("_")[-1] %}
            {%- set device = entity.entity_id.split(".")[1] %}
            {%- if room == selected_room -%}
              {%- if entity.domain == "light" -%}
                {{ entity.attributes.get("friendly_name") | replace("_","\_") ~ light_status(entity.state) }}
              {%- else %}
                {%- if entity.domain != "light" and dom != "light" %}
                  {{ entity.attributes.get('friendly_name') | replace("_","\_") ~ switch_status(entity.state) }}
                {%- endif %}
              {%- endif %}
            {%- endif %}
            {%- endfor %}

      - service: telegram_bot.edit_replymarkup
        data:
          inline_message_id: '{{ trigger.event.data.message.message_id }}'
          message_id: '{{ trigger.event.data.message.message_id }}'
          callback_query_id: '{{ trigger.event.data.id }}'
          chat_id: '{{ trigger.event.data.chat_id }}'
          inline_keyboard:
            - |
              {%- set selected_room = trigger.event.data["args"] | first %}
              {%- set nm = namespace(str="") %}
              {%- for entity in states.switch | list + states.light | list %}
              {%- set room = entity.entity_id.split(".")[1].split("_")[0] %}
              {%- set dom = entity.entity_id.split(".")[1].split("_")[1] %}
              {%- set type = entity.entity_id.split(".")[1].split("_")[-1] %}
              {%- set device = entity.entity_id.split(".")[1] %}
              {%- if room == selected_room -%}
              {%- if entity.domain == 'switch' and dom != 'light' -%}
              {%- set nm.str = nm.str ~ "," ~  entity.attributes.get('friendly_name') | replace("_","\_") ~ ":/switchtoggle " ~ device ~ " " ~ room %}
              {%- elif entity.domain == 'light' -%}
              {%- set nm.str = nm.str ~ "," ~  entity.attributes.get('friendly_name') | replace("_","\_") ~ ":/lighttoggle " ~ device ~ " " ~ room %}
              {%- endif %}
              {%- endif %}
              {%- endfor %}
              {{ nm.str.split(",")[1:] | join(", ")}}
            - "Назад:/start"

  - alias: TG Speedtest
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          command: "/speedtest"
    action:
      - service: speedtestdotnet.speedtest
      - service: telegram_bot.edit_message
        data:
          inline_message_id: '{{ trigger.event.data.message.message_id }}'
          message_id: '{{ trigger.event.data.message.message_id }}'
          callback_query_id: '{{ trigger.event.data.id }}'
          chat_id: '{{ trigger.event.data.chat_id }}'
          message: |
            Скорость загрузки {{ states('sensor.speedtest_download') }}
            Скорость отдачи {{ states('sensor.speedtest_upload') }}
            Пинг {{ states('sensor.speedtest_ping') }}
          inline_keyboard: *tg_start
          
# Пылесос 
  - alias: Vacuum Menu
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          command: "/vacuum"
    action:
      - service: telegram_bot.edit_message
        data:
          inline_message_id: '{{ trigger.event.data.message.message_id }}'
          message_id: '{{ trigger.event.data.message.message_id }}'
          callback_query_id: '{{ trigger.event.data.id }}'
          chat_id: '{{ trigger.event.data.chat_id }}'
          message: &vacuum_msg |
            ""
          inline_keyboard: &vacuum_keyboard
            - |
              {%- if is_state("vacuum.barsik", "docked") %}
              "Убрать дом:/clean all"
              {%- else %}
              "Остановить уборку:/clean stop"
              {%- endif %}
            - |
              {%- set emoji_room = 
                {
                  "bedroom": "\U0001F6CF", 
                  "bathroom": "\U0001F6C1",
                  "storeroom": "\U0001F9F3",
                  "kitchen": "\U0001F37D",
                  "corridor": "\U0001F6AA"
                }
              %}
              
              {%- macro to_emoji_room(room) -%}
              {{ emoji_room.get(room, "default") }}
              {%- endmacro %}
              
              {%- set nm = namespace(str = '') %}
              {%- for room, pic in emoji_room.items() %}
              {%- if room in states.input_select.vacuum_rooms.attributes.options %}
              {%- set nm.str = nm.str ~ ',' ~ "\U00002705 " ~ pic ~ ":/vacuum_unset " ~ room %}
              {%- else %}
              {%- set nm.str = nm.str ~ ',' ~ pic ~ ":/vacuum_set " ~ room %}
              {%- endif %}
              {%- endfor %}
              {%- set nm.lst = nm.str.split(',')[1:] | unique | list  %}
              {{ nm.lst | join(", ") }}
            - "Убрать комнаты:/clean rooms"
            - |
              {%- set power = 
                {
                    "Max": "max+",
                    "Средняя": "normal",
                    "Низкая": "max",
                    "0": "quiet"
                }
              %}
              {%- set nm = namespace(str = '') %}
              {%- for power_alias, mode in power.items() %}
              {%- set nm.str = nm.str ~ ',' ~ "\U0001F9BE " ~ power_alias ~ ":/vacuum_set power " ~ mode %}
              {%- endfor %}
              {%- set nm.lst = nm.str.split(',')[1:] | unique | list  %}
              {{ nm.lst | join(", ") }}
            - |
              {%- set water = 
                {
                    "0": "low",
                    "Мало": "medium",
                    "Много": "high",
                    "Max": "ultrahigh"
                }
              %}
              {%- set nm = namespace(str = '') %}
              {%- for water_alias, mode in water.items() %}
              {%- set nm.str = nm.str ~ ',' ~ "\U0001F4A6 " ~ water_alias ~ ":/vacuum_set water " ~ mode %}
              {%- endfor %}
              {%- set nm.lst = nm.str.split(',')[1:] | unique | list  %}
              {{ nm.lst | join(", ") }}
            - Назад:/start
          
  - alias: Vacuum Set
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          command: "/vacuum_set"
    action:
      - service: input_select.set_options
        target:
          entity_id: input_select.vacuum_rooms
        data:
          options:
            - "{% if 'kitchen' in states.input_select.vacuum_rooms.attributes.options -%} kitchen {%- endif %}"
            - "{% if 'bedroom' in states.input_select.vacuum_rooms.attributes.options -%} bedroom {%- endif %}"
            - "{% if 'bathroom' in states.input_select.vacuum_rooms.attributes.options -%} bathroom {%- endif %}"
            - "{% if 'corridor' in states.input_select.vacuum_rooms.attributes.options -%} corridor {%- endif %}"
            - "{% if 'storeroom' in states.input_select.vacuum_rooms.attributes.options -%} storeroom {%- endif %}"
            - "{{ trigger.event.data['args'] | first }}"
            
      - service: telegram_bot.edit_message
        data:
          inline_message_id: '{{ trigger.event.data.message.message_id }}'
          message_id: '{{ trigger.event.data.message.message_id }}'
          callback_query_id: '{{ trigger.event.data.id }}'
          chat_id: '{{ trigger.event.data.chat_id }}'
          message: *vacuum_msg
          inline_keyboard: *vacuum_keyboard
          
  - alias: Vacuum UnSet
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          command: "/vacuum_unset"
    action:
      - service: input_select.set_options
        target:
          entity_id: input_select.vacuum_rooms
        data:
          options:
            - "{% if 'kitchen' in states.input_select.vacuum_rooms.attributes.options   and trigger.event.data['args'] | first != 'kitchen' -%} kitchen {%- endif %}"
            - "{% if 'bedroom' in states.input_select.vacuum_rooms.attributes.options   and trigger.event.data['args'] | first != 'bedroom' -%} bedroom {%- endif %}"
            - "{% if 'bathroom' in states.input_select.vacuum_rooms.attributes.options  and trigger.event.data['args'] | first != 'bathroom' -%} bathroom {%- endif %}"
            - "{% if 'corridor' in states.input_select.vacuum_rooms.attributes.options  and trigger.event.data['args'] | first != 'corridor' -%} corridor {%- endif %}"
            - "{% if 'storeroom' in states.input_select.vacuum_rooms.attributes.options and trigger.event.data['args'] | first != 'storeroom' -%} storeroom {%- endif %}"
            
      - service: telegram_bot.edit_message
        data:
          inline_message_id: '{{ trigger.event.data.message.message_id }}'
          message_id: '{{ trigger.event.data.message.message_id }}'
          callback_query_id: '{{ trigger.event.data.id }}'
          chat_id: '{{ trigger.event.data.chat_id }}'
          message: *vacuum_msg
          inline_keyboard: *vacuum_keyboard
          
  - alias: Vacuum Clean
    id: '1638466689923'
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          command: "/clean"
    condition:
      condition: template
      value_template: '{{ trigger.event.data["args"] | length > 0 }}'
    action:
      - choose:
        - conditions:
          - condition: template
            value_template: '{{ trigger.event.data["args"] | first == "rooms" }}'
          sequence:
            - service: telegram_bot.edit_message
              data:
                inline_message_id: '{{ trigger.event.data.message.message_id }}'
                message_id: '{{ trigger.event.data.message.message_id }}'
                callback_query_id: '{{ trigger.event.data.id }}'
                chat_id: '{{ trigger.event.data.chat_id }}'
                message: *vacuum_msg
                inline_keyboard: *vacuum_keyboard
            - service: vacuum.send_command
              target:
                entity_id: vacuum.barsik
              data:
                command: spot_area
                params:
                  rooms: |
                    {%- set nm = namespace(str = '') %}
                    {%- for room in states.input_select.vacuum_rooms.attributes.options | unique %}
                    {%- set nm.str = nm.str ~ ',' ~ states.vacuum.barsik.attributes["room_" ~ room] %}
                    {%- endfor %}
                    {%- set nm.lst = nm.str.split(',')[1:] | unique | list  %}
                    {{ nm.lst | join(",") }}
                  cleanings: 1
        - conditions:
          - condition: template
            value_template: '{{ trigger.event.data["args"] | first == "all" }}'
          sequence:
            - service: vacuum.start
              target:
                entity_id: vacuum.barsik
        #- conditions:
        #  - condition: template
        #    value_template: '{{ trigger.event.data["args"] | first == "stop" }}'
        #  sequence:
        #    - service: vacuum.stop
        #      target:
        #        entity_id: vacuum.barsik
        #      data: null
# Конец пылесоса

  - alias: 'TG TEST'
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          command: '/test'
      - platform: event
        event_type: telegram_command
        event_data:
          command: '/test'
    action:
      - service: telegram_bot.send_message
        data:
          target: '{{ trigger.event.data.chat_id }}'
          callback_query_id: '{{ trigger.event.data.id }}'
          message: 'Мьяу!'
          inline_keyboard: [['bathroom:/room bathroom'], ['bedroom:/room bedroom']]

# Fun
  - alias: 'sing'
    trigger:
      - platform: event
        event_type: telegram_command
        event_data:
          command: '/sing'
    action:
      - service: telegram_bot.send_photo
        data:
          target: '{{ trigger.event.data.chat_id }}'
          callback_query_id: '{{ trigger.event.data.id }}'
          caption: 'Мау мау'
          file: '/media/maumau.jpg'
      - delay:
          seconds: 1
      - service: telegram_bot.delete_message
        data:
          message_id: "last"
          chat_id: '{{ trigger.event.data.chat_id }}'
      - service: telegram_bot.send_photo
        data:
          target: '{{ trigger.event.data.chat_id }}'
          callback_query_id: '{{ trigger.event.data.id }}'
          caption: 'Киса киса'
          file: '/media/kisakisa.jpg'
      - delay:
          seconds: 1
      - service: telegram_bot.delete_message
        data:
          message_id: "last"
          chat_id: '{{ trigger.event.data.chat_id }}'
      - service: telegram_bot.send_photo
        data:
          target: '{{ trigger.event.data.chat_id }}'
          callback_query_id: '{{ trigger.event.data.id }}'
          caption: 'Мау мау'
          file: '/media/maumau.jpg'
      - delay:
          seconds: 1
      - service: telegram_bot.delete_message
        data:
          message_id: "last"
          chat_id: '{{ trigger.event.data.chat_id }}'
      - service: telegram_bot.send_photo
        data:
          target: '{{ trigger.event.data.chat_id }}'
          callback_query_id: '{{ trigger.event.data.id }}'
          caption: 'Киса киса'
          file: '/media/kisakisa.jpg'
      - delay:
          seconds: 1
      - service: telegram_bot.delete_message
        data:
          message_id: "last"
          chat_id: '{{ trigger.event.data.chat_id }}'
      - service: telegram_bot.send_photo
        data:
          target: '{{ trigger.event.data.chat_id }}'
          callback_query_id: '{{ trigger.event.data.id }}'
          caption: 'Мау мау'
          file: '/media/maumau.jpg'
      - delay:
          seconds: 1
      - service: telegram_bot.delete_message
        data:
          message_id: "last"
          chat_id: '{{ trigger.event.data.chat_id }}'
      - service: telegram_bot.send_photo
        data:
          target: '{{ trigger.event.data.chat_id }}'
          callback_query_id: '{{ trigger.event.data.id }}'
          caption: 'Киса киса'
          file: '/media/kisakisa.jpg'
      - delay:
          seconds: 1
      - service: telegram_bot.delete_message
        data:
          message_id: "last"
          chat_id: '{{ trigger.event.data.chat_id }}'
      - service: telegram_bot.send_photo
        data:
          target: '{{ trigger.event.data.chat_id }}'
          callback_query_id: '{{ trigger.event.data.id }}'
          caption: |
            {{ ["Я киса!", "Ты киса!"] | random }}
          file: '/media/iamkisa.jpg'
          
          
          
          
          
          
          
          
          
          
          