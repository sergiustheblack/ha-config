  - alias: 'Ping'
    trigger:
      platform: event
      event_type: telegram_command
      event_data:
        command: '/ping'
    action:
      - service: telegram_bot.send_message
        data:
          callback_query_id: '{{ trigger.event.data.id }}'
          target: '{{ trigger.event.data.chat_id }}'
          message: 'Мьяу!'
    
# Switch control
  - alias: 'Turn off switch'
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          command: '/switchoff'
      - platform: event
        event_type: telegram_command
        event_data:
          command: '/switchoff'
    condition:
      condition: template
      value_template: '{{ trigger.event.data["args"] | length > 0 }}'
    action:
      - service: switch.turn_off
        data_template:
          entity_id: '{{ "switch." ~ trigger.event.data["args"] | first | string }}'
      - delay:
          seconds: '0.5'
      - service: telegram_bot.answer_callback_query
        data:
          target: '{{ trigger.event.data.chat_id }}'
          callback_query_id: '{{ trigger.event.data.id }}'
          message: |
            {%- set sw = states["switch." ~ trigger.event.data["args"] | first] %}
            {{ sw.attributes.friendly_name }}: {{ sw.state | upper }}
      - service: telegram_bot.send_message
        data:
          target: '{{ trigger.event.data.chat_id }}'
          message: |
            {%- set sw = states["switch." ~ trigger.event.data["args"] | first] %}
            {{ sw.attributes.friendly_name | replace('_','\_') }}: {{ sw.state | upper }}
        
  - alias: 'Turn on switch'
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          command: '/switchon'
      - platform: event
        event_type: telegram_command
        event_data:
          command: '/switchon'
    condition:
      condition: template
      value_template: '{{ trigger.event.data["args"] | length > 0 }}'
    action:
      - service: switch.turn_on
        data_template:
          entity_id: '{{ "switch." ~ trigger.event.data["args"] | first | string }}'
      - delay:
          seconds: '0.5'
      - service: telegram_bot.answer_callback_query
        data:
          target: '{{ trigger.event.data.chat_id }}'
          callback_query_id: '{{ trigger.event.data.id }}'
          message: |
            {%- set sw = states["switch." ~ trigger.event.data["args"] | first] %}
            {{ sw.attributes.friendly_name }}: {{ sw.state | upper }}
      - service: telegram_bot.send_message
        data:
          target: '{{ trigger.event.data.chat_id }}'
          message: |
            {%- set sw = states["switch." ~ trigger.event.data["args"] | first] %}
            {{ sw.attributes.friendly_name | replace('_','\_') }}: {{ sw.state | upper }}
          
# Info callback          
  - alias: 'Get item status'
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          command: '/itemstatus'
      - platform: event
        event_type: telegram_command
        event_data:
          command: '/itemstatus'
    condition:
      condition: template
      value_template: '{{ trigger.event.data["args"] | length > 0 }}'
    action:
      - service: telegram_bot.send_message
        data:
          target: '{{ trigger.event.data.chat_id }}'
          message: |
            {%- set item = states[trigger.event.data["args"] | first] %}
            *{{ item.attributes.friendly_name | replace('_','\_') }}*
            
            {%- for state_key in item["attributes"] %}
            {{ state_key | replace('_','\_') }} = {{ item.attributes[state_key] | replace('_','\_') }}
            {%- endfor %}
# Send simple message
  - alias: 'Send message'
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          command: '/message'
      - platform: event
        event_type: telegram_command
        event_data:
          command: '/message'
    condition:
      condition: template
      value_template: '{{ trigger.event.data["args"] | length > 0 }}'
    action:
      - service: telegram_bot.send_message
        data:
          target: '{{ trigger.event.data.chat_id }}'
          message: '{{ trigger.event.data["args"] | join(" ") }}'
          
          
# Weather
  - alias: 'Weather report'
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          command: '/weather'
      - platform: event
        event_type: telegram_command
        event_data:
          command: '/weather'
    action:
      - service: telegram_bot.send_message
        data:
          target: '{{ trigger.event.data.chat_id }}'
          message: |
            {%- set ru_daytime = 
              [
                {"night": "ночью"}, 
                {"morning": "утром"},
                {"day": "днём"},
                {"evening": "вечером"}
              ] 
            %}
            
            {%- set emojiweather = 
              [
                {"Ясно": "\U00002600"},
                {"Малооблачно": "\U0001F324"},
                {"Облачно с прояснениями": "\U0001F325"},
                {"Пасмурно": "\U00002601"},
                {"Небольшой дождь": "\U0001F326"},
                {"Дождь": "\U0001F327"},
                {"Сильный дождь": "\U0001F327\U0001F327"},
                {"Сильный дождь, гроза": "\U000026C8"},
                {"Дождь со снегом": "\U0001F327\U0001F328"},
                {"Снег": "\U0001F328U"},
                {"Снегопад": "\U0001F328\U0001F328"},
                {"Небольшой снег": "\U0001F328"}
              ] 
            %}
            
            {%- macro to_ru_daytime(daytime) -%}
            {{ (ru_daytime | map(attribute=daytime) | select('string') | list)[0] }}
            {%- endmacro %}
            
            {%- macro to_emoji(weather) -%}
            {{ (emojiweather | map(attribute=weather) | select('string') | list)[0] }}
            {%- endmacro %}
            
            {%- set sensor = states.weather.yandex_weather.attributes %}
            {%- set forecast = sensor.forecast %}
            Прогноз собран *{{ sensor["observation_time"] }}*
            {{ to_emoji(sensor["weather_condition"]) }}На улице {{ sensor["weather_condition"] | lower }}.
            Температура воздуха {{ sensor["temperature"] }}˚C, ощущается как {{ sensor["feels_like"] }}˚C.
            *Прогноз:*
            {%- for f in forecast %}
            
            {{ f.datetime.strftime('%A %B %d') }} {{ to_ru_daytime(f.part_of_day) }}:
            {{ f["weather_condition"]}}.
            Температура воздуха {{ f.temperature }}˚C, ощущается как {{ f.feels_like }},
            Минимум {{ f.templow }}˚C.
            Осадки (мм): {{ f.precipitation }}
            Вероятность выпадения осадков: {{ f.precipitation_probability }}
            {%- endfor %}

# main menu
  - alias: 'TG Start'
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          command: '/start'
      - platform: event
        event_type: telegram_command
        event_data:
          command: '/start'
    action:
      - service: telegram_bot.send_message
        data:
          target: '{{ trigger.event.data.chat_id }}'
          callback_query_id: '{{ trigger.event.data.id }}'
          message: 'Мьяу!'
          inline_keyboard:
            - |
              {%- set emoji_room = 
                [
                  {"bedroom": "\U0001F6CF"}, 
                  {"bathroom": "\U0001F6C1"},
                  {"cloakroom": "\U0001F9F3"},
                  {"kitchen": "\U0001F37D"},
                  {"hall": "\U0001F6AA"},
                  {"balcony": "\U0001F3AC"}
                ] 
              %}
              
              {%- macro to_emoji_room(room) -%}
              {{ (emoji_room | map(attribute=room) | select('string') | list)[0] }}
              {%- endmacro %}
              
              {%- set nm = namespace(str = '') %}
              {%- for entity in states.switch %}
              {%- set name = entity.entity_id.split(".")[1].split("_")[0] %}
              {%- set nm.str = nm.str ~ ',' ~ to_emoji_room(name) ~ ":/room " ~ name %}
              {%- endfor %}
              {%- set nm.lst = nm.str.split(',')[1:] | unique | list  %}
              {{ nm.lst | join(", ") }}
            
  - alias: 'TG Expand room'
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          command: '/room'
      - platform: event
        event_type: telegram_command
        event_data:
          command: '/room'
    condition:
      condition: template
      value_template: '{{ trigger.event.data["args"] | length > 0 }}'
    action:
      - service: telegram_bot.edit_message
        data:
          message_id: '{{ trigger.event.data.message.message_id }}'
          chat_id: '{{ trigger.event.data.chat_id }}'
          message: |
            asd
          inline_keyboard:
            - "Edit message:/edit_msg, Don't:/do_nothing"
            - "Remove this button:/remove_button"
            
  - alias: 'TG TEST'
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          command: '/test'
      - platform: event
        event_type: telegram_command
        event_data:
          command: '/test'
    action:
      - service: telegram_bot.send_message
        data:
          target: '{{ trigger.event.data.chat_id }}'
          callback_query_id: '{{ trigger.event.data.id }}'
          message: 'Мьяу!'
          inline_keyboard: [['bathroom:/room bathroom'], ['bedroom:/room bedroom']]
          
          
          
          
          
          
          
          
          
          
          